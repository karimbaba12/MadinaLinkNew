//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
  HttpContext,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root',
})
export class AddressClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<AddressDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Address/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<AddressDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<AddressDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<AddressDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AddressDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<AddressDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Address/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<AddressDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<AddressDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<AddressDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AddressDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: AddressDto | undefined,
    httpContext?: HttpContext
  ): Observable<AddressDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Address/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<AddressDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<AddressDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<AddressDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AddressDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: AddressDto | undefined,
    httpContext?: HttpContext
  ): Observable<AddressDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Address/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<AddressDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<AddressDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<AddressDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AddressDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Address/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: AddressDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Address/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class AuthClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param body (optional)
   * @return OK
   */
  login(
    body: LoginRequestDTO | undefined,
    httpContext?: HttpContext
  ): Observable<StringApiResponse> {
    let url_ = this.baseUrl + '/api/Auth/login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringApiResponse>;
        })
      );
  }

  protected processLogin(
    response: HttpResponseBase
  ): Observable<StringApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class CountersClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<CounterDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<CounterDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<CounterDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<CounterDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CounterDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<CounterDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<CounterDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<CounterDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<CounterDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CounterDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: CounterDto | undefined,
    httpContext?: HttpContext
  ): Observable<CounterDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<CounterDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<CounterDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<CounterDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CounterDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: CounterDto | undefined,
    httpContext?: HttpContext
  ): Observable<CounterDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<CounterDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<CounterDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<CounterDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CounterDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: CounterDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Counters/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class PaymentClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<PaymentDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<PaymentDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<PaymentDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: PaymentDto | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<PaymentDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: PaymentDto | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<PaymentDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: PaymentDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Payment/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class PaymentMethodClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<PaymentMethodDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentMethodDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentMethodDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<PaymentMethodDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            PaymentMethodDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentMethodDtoApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentMethodDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentMethodDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<PaymentMethodDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentMethodDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: PaymentMethodDto | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentMethodDtoApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentMethodDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentMethodDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<PaymentMethodDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentMethodDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: PaymentMethodDto | undefined,
    httpContext?: HttpContext
  ): Observable<PaymentMethodDtoApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaymentMethodDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaymentMethodDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<PaymentMethodDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = PaymentMethodDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: PaymentMethodDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/PaymentMethod/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class RoleClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(httpContext?: HttpContext): Observable<RoleDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Role/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<RoleDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<RoleDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<RoleDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RoleDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<RoleDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Role/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<RoleDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<RoleDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<RoleDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RoleDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: RoleDto | undefined,
    httpContext?: HttpContext
  ): Observable<RoleDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Role/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<RoleDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<RoleDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<RoleDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RoleDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: RoleDto | undefined,
    httpContext?: HttpContext
  ): Observable<RoleDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Role/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<RoleDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<RoleDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<RoleDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RoleDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Role/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: RoleDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Role/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class ServiceClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<ServiceDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Service/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ServiceDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ServiceDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<ServiceDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ServiceDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<ServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Service/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ServiceDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<ServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: ServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<ServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Service/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ServiceDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<ServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: ServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<ServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Service/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ServiceDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<ServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Service/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: ServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Service/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class SubscriptionClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<SubscriptionDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<SubscriptionDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            SubscriptionDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<SubscriptionDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: SubscriptionDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<SubscriptionDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: SubscriptionDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<SubscriptionDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: SubscriptionDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Subscription/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class SubscriptionTypeClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<SubscriptionTypeDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionTypeDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionTypeDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<SubscriptionTypeDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            SubscriptionTypeDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionTypeDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionTypeDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionTypeDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<SubscriptionTypeDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionTypeDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: SubscriptionTypeDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionTypeDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionTypeDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionTypeDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<SubscriptionTypeDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionTypeDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: SubscriptionTypeDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubscriptionTypeDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubscriptionTypeDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubscriptionTypeDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<SubscriptionTypeDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubscriptionTypeDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: SubscriptionTypeDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/SubscriptionType/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class SubServiceClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<SubServiceDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubServiceDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubServiceDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<SubServiceDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubServiceDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<SubServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubServiceDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<SubServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: SubServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubServiceDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<SubServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: SubServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<SubServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SubServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SubServiceDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<SubServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = SubServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: SubServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/SubService/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class TenantClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<TenantDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<TenantDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<TenantDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<TenantDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: TenantDto | undefined,
    httpContext?: HttpContext
  ): Observable<TenantDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<TenantDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: TenantDto | undefined,
    httpContext?: HttpContext
  ): Observable<TenantDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<TenantDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: TenantDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Tenant/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class TenantServiceClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<TenantServiceDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantServiceDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantServiceDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<TenantServiceDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            TenantServiceDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<TenantServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantServiceDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<TenantServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: TenantServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<TenantServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantServiceDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<TenantServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: TenantServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<TenantServiceDtoApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TenantServiceDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TenantServiceDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<TenantServiceDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TenantServiceDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: TenantServiceDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/TenantService/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class TokensClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getAll(
    httpContext?: HttpContext
  ): Observable<TokenDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TokenDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<TokenDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TokenDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<TokenDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TokenDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<TokenDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TokenDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: TokenDto | undefined,
    httpContext?: HttpContext
  ): Observable<TokenDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TokenDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<TokenDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TokenDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: TokenDto | undefined,
    httpContext?: HttpContext
  ): Observable<TokenDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<TokenDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<TokenDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TokenDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: TokenDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Tokens/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class UsersClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param name (optional)
   * @return OK
   */
  search(
    name: string | undefined,
    httpContext?: HttpContext
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/Users/search?';
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined)
      url_ += 'name=' + encodeURIComponent('' + name) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSearch(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSearch(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSearch(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  updateUser(
    body: UserDtoUpdate | undefined,
    httpContext?: HttpContext
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/Users/UpdateUser';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdateUser(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdateUser(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processUpdateUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getAll(httpContext?: HttpContext): Observable<UserDtoIEnumerableApiResponse> {
    let url_ = this.baseUrl + '/api/Users/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDtoIEnumerableApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoIEnumerableApiResponse>;
        })
      );
  }

  protected processGetAll(
    response: HttpResponseBase
  ): Observable<UserDtoIEnumerableApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoIEnumerableApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  getById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<UserDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Users/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoApiResponse>;
        })
      );
  }

  protected processGetById(
    response: HttpResponseBase
  ): Observable<UserDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  add(
    body: UserDto | undefined,
    httpContext?: HttpContext
  ): Observable<UserDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Users/Add';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdd(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdd(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoApiResponse>;
        })
      );
  }

  protected processAdd(
    response: HttpResponseBase
  ): Observable<UserDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  update(
    body: UserDto | undefined,
    httpContext?: HttpContext
  ): Observable<UserDtoApiResponse> {
    let url_ = this.baseUrl + '/api/Users/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdate(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdate(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDtoApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoApiResponse>;
        })
      );
  }

  protected processUpdate(
    response: HttpResponseBase
  ): Observable<UserDtoApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional)
   * @return OK
   */
  deleteById(
    id: number | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Users/DeleteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteById(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDeleteById(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  delete(
    body: UserDto | undefined,
    httpContext?: HttpContext
  ): Observable<BooleanApiResponse> {
    let url_ = this.baseUrl + '/api/Users/Delete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      context: httpContext,
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDelete(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDelete(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<BooleanApiResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<BooleanApiResponse>;
        })
      );
  }

  protected processDelete(
    response: HttpResponseBase
  ): Observable<BooleanApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = BooleanApiResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class AddressDto implements IAddressDto {
  addressId?: number;
  country?: string | null;
  street?: string | null;
  city?: string | null;
  region?: string | null;
  governorates?: string | null;
  building?: string | null;
  floor?: number;
  direction?: string | null;
  block?: string | null;

  constructor(data?: IAddressDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.addressId =
        _data['addressId'] !== undefined ? _data['addressId'] : <any>null;
      this.country =
        _data['country'] !== undefined ? _data['country'] : <any>null;
      this.street = _data['street'] !== undefined ? _data['street'] : <any>null;
      this.city = _data['city'] !== undefined ? _data['city'] : <any>null;
      this.region = _data['region'] !== undefined ? _data['region'] : <any>null;
      this.governorates =
        _data['governorates'] !== undefined ? _data['governorates'] : <any>null;
      this.building =
        _data['building'] !== undefined ? _data['building'] : <any>null;
      this.floor = _data['floor'] !== undefined ? _data['floor'] : <any>null;
      this.direction =
        _data['direction'] !== undefined ? _data['direction'] : <any>null;
      this.block = _data['block'] !== undefined ? _data['block'] : <any>null;
    }
  }

  static fromJS(data: any): AddressDto {
    data = typeof data === 'object' ? data : {};
    let result = new AddressDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['addressId'] =
      this.addressId !== undefined ? this.addressId : <any>null;
    data['country'] = this.country !== undefined ? this.country : <any>null;
    data['street'] = this.street !== undefined ? this.street : <any>null;
    data['city'] = this.city !== undefined ? this.city : <any>null;
    data['region'] = this.region !== undefined ? this.region : <any>null;
    data['governorates'] =
      this.governorates !== undefined ? this.governorates : <any>null;
    data['building'] = this.building !== undefined ? this.building : <any>null;
    data['floor'] = this.floor !== undefined ? this.floor : <any>null;
    data['direction'] =
      this.direction !== undefined ? this.direction : <any>null;
    data['block'] = this.block !== undefined ? this.block : <any>null;
    return data;
  }
}

export interface IAddressDto {
  addressId?: number;
  country?: string | null;
  street?: string | null;
  city?: string | null;
  region?: string | null;
  governorates?: string | null;
  building?: string | null;
  floor?: number;
  direction?: string | null;
  block?: string | null;
}

export class AddressDtoApiResponse implements IAddressDtoApiResponse {
  success?: boolean;
  data?: AddressDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IAddressDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? AddressDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): AddressDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AddressDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IAddressDtoApiResponse {
  success?: boolean;
  data?: AddressDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class AddressDtoIEnumerableApiResponse
  implements IAddressDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: AddressDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IAddressDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(AddressDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): AddressDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AddressDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IAddressDtoIEnumerableApiResponse {
  success?: boolean;
  data?: AddressDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class BooleanApiResponse implements IBooleanApiResponse {
  success?: boolean;
  data?: boolean;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IBooleanApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] !== undefined ? _data['data'] : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): BooleanApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new BooleanApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data !== undefined ? this.data : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IBooleanApiResponse {
  success?: boolean;
  data?: boolean;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class CounterDto implements ICounterDto {
  counterId?: number;
  subServiceId?: number;
  count?: number;
  date?: number;
  tenantId?: number;

  constructor(data?: ICounterDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.counterId =
        _data['counterId'] !== undefined ? _data['counterId'] : <any>null;
      this.subServiceId =
        _data['subServiceId'] !== undefined ? _data['subServiceId'] : <any>null;
      this.count = _data['count'] !== undefined ? _data['count'] : <any>null;
      this.date = _data['date'] !== undefined ? _data['date'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): CounterDto {
    data = typeof data === 'object' ? data : {};
    let result = new CounterDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['counterId'] =
      this.counterId !== undefined ? this.counterId : <any>null;
    data['subServiceId'] =
      this.subServiceId !== undefined ? this.subServiceId : <any>null;
    data['count'] = this.count !== undefined ? this.count : <any>null;
    data['date'] = this.date !== undefined ? this.date : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface ICounterDto {
  counterId?: number;
  subServiceId?: number;
  count?: number;
  date?: number;
  tenantId?: number;
}

export class CounterDtoApiResponse implements ICounterDtoApiResponse {
  success?: boolean;
  data?: CounterDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ICounterDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? CounterDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): CounterDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CounterDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ICounterDtoApiResponse {
  success?: boolean;
  data?: CounterDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class CounterDtoIEnumerableApiResponse
  implements ICounterDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: CounterDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ICounterDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(CounterDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): CounterDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CounterDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ICounterDtoIEnumerableApiResponse {
  success?: boolean;
  data?: CounterDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class LoginRequestDTO implements ILoginRequestDTO {
  username?: string | null;
  password?: string | null;

  constructor(data?: ILoginRequestDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username =
        _data['username'] !== undefined ? _data['username'] : <any>null;
      this.password =
        _data['password'] !== undefined ? _data['password'] : <any>null;
    }
  }

  static fromJS(data: any): LoginRequestDTO {
    data = typeof data === 'object' ? data : {};
    let result = new LoginRequestDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['username'] = this.username !== undefined ? this.username : <any>null;
    data['password'] = this.password !== undefined ? this.password : <any>null;
    return data;
  }
}

export interface ILoginRequestDTO {
  username?: string | null;
  password?: string | null;
}

export class PaymentDto implements IPaymentDto {
  paymentId?: number;
  subscriptionId?: number;
  paymentDate?: number;
  credit?: number;
  debit?: number;
  paymentMethodId?: number;
  tenantId?: number;

  constructor(data?: IPaymentDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.paymentId =
        _data['paymentId'] !== undefined ? _data['paymentId'] : <any>null;
      this.subscriptionId =
        _data['subscriptionId'] !== undefined
          ? _data['subscriptionId']
          : <any>null;
      this.paymentDate =
        _data['paymentDate'] !== undefined ? _data['paymentDate'] : <any>null;
      this.credit = _data['credit'] !== undefined ? _data['credit'] : <any>null;
      this.debit = _data['debit'] !== undefined ? _data['debit'] : <any>null;
      this.paymentMethodId =
        _data['paymentMethodId'] !== undefined
          ? _data['paymentMethodId']
          : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentDto {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['paymentId'] =
      this.paymentId !== undefined ? this.paymentId : <any>null;
    data['subscriptionId'] =
      this.subscriptionId !== undefined ? this.subscriptionId : <any>null;
    data['paymentDate'] =
      this.paymentDate !== undefined ? this.paymentDate : <any>null;
    data['credit'] = this.credit !== undefined ? this.credit : <any>null;
    data['debit'] = this.debit !== undefined ? this.debit : <any>null;
    data['paymentMethodId'] =
      this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface IPaymentDto {
  paymentId?: number;
  subscriptionId?: number;
  paymentDate?: number;
  credit?: number;
  debit?: number;
  paymentMethodId?: number;
  tenantId?: number;
}

export class PaymentDtoApiResponse implements IPaymentDtoApiResponse {
  success?: boolean;
  data?: PaymentDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IPaymentDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? PaymentDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IPaymentDtoApiResponse {
  success?: boolean;
  data?: PaymentDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class PaymentDtoIEnumerableApiResponse
  implements IPaymentDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: PaymentDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IPaymentDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(PaymentDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IPaymentDtoIEnumerableApiResponse {
  success?: boolean;
  data?: PaymentDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class PaymentMethodDto implements IPaymentMethodDto {
  paymentMethodId?: number;
  paymentMethodName?: string | null;
  paymentMethodCode?: string | null;
  tenantId?: number;

  constructor(data?: IPaymentMethodDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.paymentMethodId =
        _data['paymentMethodId'] !== undefined
          ? _data['paymentMethodId']
          : <any>null;
      this.paymentMethodName =
        _data['paymentMethodName'] !== undefined
          ? _data['paymentMethodName']
          : <any>null;
      this.paymentMethodCode =
        _data['paymentMethodCode'] !== undefined
          ? _data['paymentMethodCode']
          : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentMethodDto {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethodDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['paymentMethodId'] =
      this.paymentMethodId !== undefined ? this.paymentMethodId : <any>null;
    data['paymentMethodName'] =
      this.paymentMethodName !== undefined ? this.paymentMethodName : <any>null;
    data['paymentMethodCode'] =
      this.paymentMethodCode !== undefined ? this.paymentMethodCode : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface IPaymentMethodDto {
  paymentMethodId?: number;
  paymentMethodName?: string | null;
  paymentMethodCode?: string | null;
  tenantId?: number;
}

export class PaymentMethodDtoApiResponse
  implements IPaymentMethodDtoApiResponse
{
  success?: boolean;
  data?: PaymentMethodDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IPaymentMethodDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data']
        ? PaymentMethodDto.fromJS(_data['data'])
        : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentMethodDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethodDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IPaymentMethodDtoApiResponse {
  success?: boolean;
  data?: PaymentMethodDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class PaymentMethodDtoIEnumerableApiResponse
  implements IPaymentMethodDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: PaymentMethodDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IPaymentMethodDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(PaymentMethodDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): PaymentMethodDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentMethodDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IPaymentMethodDtoIEnumerableApiResponse {
  success?: boolean;
  data?: PaymentMethodDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class RoleDto implements IRoleDto {
  roleId?: number;
  roleName?: string | null;

  constructor(data?: IRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.roleId = _data['roleId'] !== undefined ? _data['roleId'] : <any>null;
      this.roleName =
        _data['roleName'] !== undefined ? _data['roleName'] : <any>null;
    }
  }

  static fromJS(data: any): RoleDto {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roleId'] = this.roleId !== undefined ? this.roleId : <any>null;
    data['roleName'] = this.roleName !== undefined ? this.roleName : <any>null;
    return data;
  }
}

export interface IRoleDto {
  roleId?: number;
  roleName?: string | null;
}

export class RoleDtoApiResponse implements IRoleDtoApiResponse {
  success?: boolean;
  data?: RoleDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IRoleDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? RoleDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): RoleDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IRoleDtoApiResponse {
  success?: boolean;
  data?: RoleDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class RoleDtoIEnumerableApiResponse
  implements IRoleDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: RoleDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IRoleDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data']) this.data!.push(RoleDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): RoleDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new RoleDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IRoleDtoIEnumerableApiResponse {
  success?: boolean;
  data?: RoleDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class ServiceDto implements IServiceDto {
  serviceId?: number;
  serviceCode?: string | null;
  serviceName?: string | null;
  tenantId?: number;

  constructor(data?: IServiceDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.serviceId =
        _data['serviceId'] !== undefined ? _data['serviceId'] : <any>null;
      this.serviceCode =
        _data['serviceCode'] !== undefined ? _data['serviceCode'] : <any>null;
      this.serviceName =
        _data['serviceName'] !== undefined ? _data['serviceName'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): ServiceDto {
    data = typeof data === 'object' ? data : {};
    let result = new ServiceDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['serviceId'] =
      this.serviceId !== undefined ? this.serviceId : <any>null;
    data['serviceCode'] =
      this.serviceCode !== undefined ? this.serviceCode : <any>null;
    data['serviceName'] =
      this.serviceName !== undefined ? this.serviceName : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface IServiceDto {
  serviceId?: number;
  serviceCode?: string | null;
  serviceName?: string | null;
  tenantId?: number;
}

export class ServiceDtoApiResponse implements IServiceDtoApiResponse {
  success?: boolean;
  data?: ServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IServiceDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? ServiceDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): ServiceDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ServiceDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IServiceDtoApiResponse {
  success?: boolean;
  data?: ServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class ServiceDtoIEnumerableApiResponse
  implements IServiceDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: ServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IServiceDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(ServiceDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): ServiceDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ServiceDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IServiceDtoIEnumerableApiResponse {
  success?: boolean;
  data?: ServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class StringApiResponse implements IStringApiResponse {
  success?: boolean;
  data?: string | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IStringApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] !== undefined ? _data['data'] : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): StringApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new StringApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data !== undefined ? this.data : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IStringApiResponse {
  success?: boolean;
  data?: string | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubServiceDto implements ISubServiceDto {
  subServiceId?: number;
  serviceId?: number;
  subscriptionTypeId?: number;
  subServiceCode?: string | null;
  subService1?: string | null;
  price?: number;
  tenantId?: number;

  constructor(data?: ISubServiceDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.subServiceId =
        _data['subServiceId'] !== undefined ? _data['subServiceId'] : <any>null;
      this.serviceId =
        _data['serviceId'] !== undefined ? _data['serviceId'] : <any>null;
      this.subscriptionTypeId =
        _data['subscriptionTypeId'] !== undefined
          ? _data['subscriptionTypeId']
          : <any>null;
      this.subServiceCode =
        _data['subServiceCode'] !== undefined
          ? _data['subServiceCode']
          : <any>null;
      this.subService1 =
        _data['subService1'] !== undefined ? _data['subService1'] : <any>null;
      this.price = _data['price'] !== undefined ? _data['price'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): SubServiceDto {
    data = typeof data === 'object' ? data : {};
    let result = new SubServiceDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['subServiceId'] =
      this.subServiceId !== undefined ? this.subServiceId : <any>null;
    data['serviceId'] =
      this.serviceId !== undefined ? this.serviceId : <any>null;
    data['subscriptionTypeId'] =
      this.subscriptionTypeId !== undefined
        ? this.subscriptionTypeId
        : <any>null;
    data['subServiceCode'] =
      this.subServiceCode !== undefined ? this.subServiceCode : <any>null;
    data['subService1'] =
      this.subService1 !== undefined ? this.subService1 : <any>null;
    data['price'] = this.price !== undefined ? this.price : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface ISubServiceDto {
  subServiceId?: number;
  serviceId?: number;
  subscriptionTypeId?: number;
  subServiceCode?: string | null;
  subService1?: string | null;
  price?: number;
  tenantId?: number;
}

export class SubServiceDtoApiResponse implements ISubServiceDtoApiResponse {
  success?: boolean;
  data?: SubServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubServiceDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data']
        ? SubServiceDto.fromJS(_data['data'])
        : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubServiceDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubServiceDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubServiceDtoApiResponse {
  success?: boolean;
  data?: SubServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubServiceDtoIEnumerableApiResponse
  implements ISubServiceDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: SubServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubServiceDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(SubServiceDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubServiceDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubServiceDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubServiceDtoIEnumerableApiResponse {
  success?: boolean;
  data?: SubServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubscriptionDto implements ISubscriptionDto {
  subscriptionId?: number;
  subServiceId?: number;
  userId?: number;
  startDate?: number;
  endDate?: number;
  discount?: number;
  isActive?: boolean;
  tenantId?: number;

  constructor(data?: ISubscriptionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.subscriptionId =
        _data['subscriptionId'] !== undefined
          ? _data['subscriptionId']
          : <any>null;
      this.subServiceId =
        _data['subServiceId'] !== undefined ? _data['subServiceId'] : <any>null;
      this.userId = _data['userId'] !== undefined ? _data['userId'] : <any>null;
      this.startDate =
        _data['startDate'] !== undefined ? _data['startDate'] : <any>null;
      this.endDate =
        _data['endDate'] !== undefined ? _data['endDate'] : <any>null;
      this.discount =
        _data['discount'] !== undefined ? _data['discount'] : <any>null;
      this.isActive =
        _data['isActive'] !== undefined ? _data['isActive'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionDto {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['subscriptionId'] =
      this.subscriptionId !== undefined ? this.subscriptionId : <any>null;
    data['subServiceId'] =
      this.subServiceId !== undefined ? this.subServiceId : <any>null;
    data['userId'] = this.userId !== undefined ? this.userId : <any>null;
    data['startDate'] =
      this.startDate !== undefined ? this.startDate : <any>null;
    data['endDate'] = this.endDate !== undefined ? this.endDate : <any>null;
    data['discount'] = this.discount !== undefined ? this.discount : <any>null;
    data['isActive'] = this.isActive !== undefined ? this.isActive : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface ISubscriptionDto {
  subscriptionId?: number;
  subServiceId?: number;
  userId?: number;
  startDate?: number;
  endDate?: number;
  discount?: number;
  isActive?: boolean;
  tenantId?: number;
}

export class SubscriptionDtoApiResponse implements ISubscriptionDtoApiResponse {
  success?: boolean;
  data?: SubscriptionDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubscriptionDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data']
        ? SubscriptionDto.fromJS(_data['data'])
        : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubscriptionDtoApiResponse {
  success?: boolean;
  data?: SubscriptionDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubscriptionDtoIEnumerableApiResponse
  implements ISubscriptionDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: SubscriptionDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubscriptionDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(SubscriptionDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubscriptionDtoIEnumerableApiResponse {
  success?: boolean;
  data?: SubscriptionDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubscriptionTypeDto implements ISubscriptionTypeDto {
  subscriptionTypeId?: number;
  subscriptionTypeName?: string | null;

  constructor(data?: ISubscriptionTypeDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.subscriptionTypeId =
        _data['subscriptionTypeId'] !== undefined
          ? _data['subscriptionTypeId']
          : <any>null;
      this.subscriptionTypeName =
        _data['subscriptionTypeName'] !== undefined
          ? _data['subscriptionTypeName']
          : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionTypeDto {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionTypeDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['subscriptionTypeId'] =
      this.subscriptionTypeId !== undefined
        ? this.subscriptionTypeId
        : <any>null;
    data['subscriptionTypeName'] =
      this.subscriptionTypeName !== undefined
        ? this.subscriptionTypeName
        : <any>null;
    return data;
  }
}

export interface ISubscriptionTypeDto {
  subscriptionTypeId?: number;
  subscriptionTypeName?: string | null;
}

export class SubscriptionTypeDtoApiResponse
  implements ISubscriptionTypeDtoApiResponse
{
  success?: boolean;
  data?: SubscriptionTypeDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubscriptionTypeDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data']
        ? SubscriptionTypeDto.fromJS(_data['data'])
        : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionTypeDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionTypeDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubscriptionTypeDtoApiResponse {
  success?: boolean;
  data?: SubscriptionTypeDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class SubscriptionTypeDtoIEnumerableApiResponse
  implements ISubscriptionTypeDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: SubscriptionTypeDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ISubscriptionTypeDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(SubscriptionTypeDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): SubscriptionTypeDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new SubscriptionTypeDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ISubscriptionTypeDtoIEnumerableApiResponse {
  success?: boolean;
  data?: SubscriptionTypeDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TenantDto implements ITenantDto {
  tenantId?: number;
  tenantName?: string | null;
  address?: string | null;
  phoneNumber?: number;
  email?: string | null;
  createdAt?: number;
  isActive?: boolean;

  constructor(data?: ITenantDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
      this.tenantName =
        _data['tenantName'] !== undefined ? _data['tenantName'] : <any>null;
      this.address =
        _data['address'] !== undefined ? _data['address'] : <any>null;
      this.phoneNumber =
        _data['phoneNumber'] !== undefined ? _data['phoneNumber'] : <any>null;
      this.email = _data['email'] !== undefined ? _data['email'] : <any>null;
      this.createdAt =
        _data['createdAt'] !== undefined ? _data['createdAt'] : <any>null;
      this.isActive =
        _data['isActive'] !== undefined ? _data['isActive'] : <any>null;
    }
  }

  static fromJS(data: any): TenantDto {
    data = typeof data === 'object' ? data : {};
    let result = new TenantDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    data['tenantName'] =
      this.tenantName !== undefined ? this.tenantName : <any>null;
    data['address'] = this.address !== undefined ? this.address : <any>null;
    data['phoneNumber'] =
      this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
    data['email'] = this.email !== undefined ? this.email : <any>null;
    data['createdAt'] =
      this.createdAt !== undefined ? this.createdAt : <any>null;
    data['isActive'] = this.isActive !== undefined ? this.isActive : <any>null;
    return data;
  }
}

export interface ITenantDto {
  tenantId?: number;
  tenantName?: string | null;
  address?: string | null;
  phoneNumber?: number;
  email?: string | null;
  createdAt?: number;
  isActive?: boolean;
}

export class TenantDtoApiResponse implements ITenantDtoApiResponse {
  success?: boolean;
  data?: TenantDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITenantDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? TenantDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TenantDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TenantDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITenantDtoApiResponse {
  success?: boolean;
  data?: TenantDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TenantDtoIEnumerableApiResponse
  implements ITenantDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: TenantDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITenantDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data']) this.data!.push(TenantDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TenantDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TenantDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITenantDtoIEnumerableApiResponse {
  success?: boolean;
  data?: TenantDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TenantServiceDto implements ITenantServiceDto {
  tenantServiceId?: number;
  tenantId?: number;
  serviceId?: number;

  constructor(data?: ITenantServiceDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenantServiceId =
        _data['tenantServiceId'] !== undefined
          ? _data['tenantServiceId']
          : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
      this.serviceId =
        _data['serviceId'] !== undefined ? _data['serviceId'] : <any>null;
    }
  }

  static fromJS(data: any): TenantServiceDto {
    data = typeof data === 'object' ? data : {};
    let result = new TenantServiceDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantServiceId'] =
      this.tenantServiceId !== undefined ? this.tenantServiceId : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    data['serviceId'] =
      this.serviceId !== undefined ? this.serviceId : <any>null;
    return data;
  }
}

export interface ITenantServiceDto {
  tenantServiceId?: number;
  tenantId?: number;
  serviceId?: number;
}

export class TenantServiceDtoApiResponse
  implements ITenantServiceDtoApiResponse
{
  success?: boolean;
  data?: TenantServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITenantServiceDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data']
        ? TenantServiceDto.fromJS(_data['data'])
        : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TenantServiceDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TenantServiceDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITenantServiceDtoApiResponse {
  success?: boolean;
  data?: TenantServiceDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TenantServiceDtoIEnumerableApiResponse
  implements ITenantServiceDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: TenantServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITenantServiceDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(TenantServiceDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TenantServiceDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TenantServiceDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITenantServiceDtoIEnumerableApiResponse {
  success?: boolean;
  data?: TenantServiceDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TokenDto implements ITokenDto {
  tokenId?: number;
  token1?: string | null;
  tokenType?: string | null;
  createdAt?: number;
  expiresAt?: number;
  isActive?: boolean;
  tenantId?: number;

  constructor(data?: ITokenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tokenId =
        _data['tokenId'] !== undefined ? _data['tokenId'] : <any>null;
      this.token1 = _data['token1'] !== undefined ? _data['token1'] : <any>null;
      this.tokenType =
        _data['tokenType'] !== undefined ? _data['tokenType'] : <any>null;
      this.createdAt =
        _data['createdAt'] !== undefined ? _data['createdAt'] : <any>null;
      this.expiresAt =
        _data['expiresAt'] !== undefined ? _data['expiresAt'] : <any>null;
      this.isActive =
        _data['isActive'] !== undefined ? _data['isActive'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
    }
  }

  static fromJS(data: any): TokenDto {
    data = typeof data === 'object' ? data : {};
    let result = new TokenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tokenId'] = this.tokenId !== undefined ? this.tokenId : <any>null;
    data['token1'] = this.token1 !== undefined ? this.token1 : <any>null;
    data['tokenType'] =
      this.tokenType !== undefined ? this.tokenType : <any>null;
    data['createdAt'] =
      this.createdAt !== undefined ? this.createdAt : <any>null;
    data['expiresAt'] =
      this.expiresAt !== undefined ? this.expiresAt : <any>null;
    data['isActive'] = this.isActive !== undefined ? this.isActive : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    return data;
  }
}

export interface ITokenDto {
  tokenId?: number;
  token1?: string | null;
  tokenType?: string | null;
  createdAt?: number;
  expiresAt?: number;
  isActive?: boolean;
  tenantId?: number;
}

export class TokenDtoApiResponse implements ITokenDtoApiResponse {
  success?: boolean;
  data?: TokenDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITokenDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? TokenDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TokenDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TokenDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITokenDtoApiResponse {
  success?: boolean;
  data?: TokenDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class TokenDtoIEnumerableApiResponse
  implements ITokenDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: TokenDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: ITokenDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data']) this.data!.push(TokenDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): TokenDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TokenDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface ITokenDtoIEnumerableApiResponse {
  success?: boolean;
  data?: TokenDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class UserDto implements IUserDto {
  userId?: number;
  name!: string;
  phoneNumber!: number;
  email!: string;
  createdAt?: number;
  tenantId?: number;
  username!: string;
  passwordHash!: string;
  roleId?: number;
  isActive?: boolean;
  address?: AddressDto;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'] !== undefined ? _data['userId'] : <any>null;
      this.name = _data['name'] !== undefined ? _data['name'] : <any>null;
      this.phoneNumber =
        _data['phoneNumber'] !== undefined ? _data['phoneNumber'] : <any>null;
      this.email = _data['email'] !== undefined ? _data['email'] : <any>null;
      this.createdAt =
        _data['createdAt'] !== undefined ? _data['createdAt'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
      this.username =
        _data['username'] !== undefined ? _data['username'] : <any>null;
      this.passwordHash =
        _data['passwordHash'] !== undefined ? _data['passwordHash'] : <any>null;
      this.roleId = _data['roleId'] !== undefined ? _data['roleId'] : <any>null;
      this.isActive =
        _data['isActive'] !== undefined ? _data['isActive'] : <any>null;
      this.address = _data['address']
        ? AddressDto.fromJS(_data['address'])
        : <any>null;
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId !== undefined ? this.userId : <any>null;
    data['name'] = this.name !== undefined ? this.name : <any>null;
    data['phoneNumber'] =
      this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
    data['email'] = this.email !== undefined ? this.email : <any>null;
    data['createdAt'] =
      this.createdAt !== undefined ? this.createdAt : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    data['username'] = this.username !== undefined ? this.username : <any>null;
    data['passwordHash'] =
      this.passwordHash !== undefined ? this.passwordHash : <any>null;
    data['roleId'] = this.roleId !== undefined ? this.roleId : <any>null;
    data['isActive'] = this.isActive !== undefined ? this.isActive : <any>null;
    data['address'] = this.address ? this.address.toJSON() : <any>null;
    return data;
  }
}

export interface IUserDto {
  userId?: number;
  name: string;
  phoneNumber: number;
  email: string;
  createdAt?: number;
  tenantId?: number;
  username: string;
  passwordHash: string;
  roleId?: number;
  isActive?: boolean;
  address?: AddressDto;
}

export class UserDtoApiResponse implements IUserDtoApiResponse {
  success?: boolean;
  data?: UserDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IUserDtoApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      this.data = _data['data'] ? UserDto.fromJS(_data['data']) : <any>null;
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): UserDtoApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    data['data'] = this.data ? this.data.toJSON() : <any>null;
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IUserDtoApiResponse {
  success?: boolean;
  data?: UserDto;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class UserDtoIEnumerableApiResponse
  implements IUserDtoIEnumerableApiResponse
{
  success?: boolean;
  data?: UserDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;

  constructor(data?: IUserDtoIEnumerableApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success =
        _data['success'] !== undefined ? _data['success'] : <any>null;
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data']) this.data!.push(UserDto.fromJS(item));
      } else {
        this.data = <any>null;
      }
      this.statusCode =
        _data['statusCode'] !== undefined ? _data['statusCode'] : <any>null;
      this.message =
        _data['message'] !== undefined ? _data['message'] : <any>null;
      this.errorMessage =
        _data['errorMessage'] !== undefined ? _data['errorMessage'] : <any>null;
    }
  }

  static fromJS(data: any): UserDtoIEnumerableApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoIEnumerableApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['success'] = this.success !== undefined ? this.success : <any>null;
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['statusCode'] =
      this.statusCode !== undefined ? this.statusCode : <any>null;
    data['message'] = this.message !== undefined ? this.message : <any>null;
    data['errorMessage'] =
      this.errorMessage !== undefined ? this.errorMessage : <any>null;
    return data;
  }
}

export interface IUserDtoIEnumerableApiResponse {
  success?: boolean;
  data?: UserDto[] | null;
  statusCode?: number;
  message?: string | null;
  errorMessage?: string | null;
}

export class UserDtoUpdate implements IUserDtoUpdate {
  userId?: number;
  name!: string;
  phoneNumber!: number;
  email!: string;
  createdAt?: number;
  tenantId?: number;
  username!: string;
  roleId!: number;
  isActive?: boolean;
  address?: AddressDto;

  constructor(data?: IUserDtoUpdate) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'] !== undefined ? _data['userId'] : <any>null;
      this.name = _data['name'] !== undefined ? _data['name'] : <any>null;
      this.phoneNumber =
        _data['phoneNumber'] !== undefined ? _data['phoneNumber'] : <any>null;
      this.email = _data['email'] !== undefined ? _data['email'] : <any>null;
      this.createdAt =
        _data['createdAt'] !== undefined ? _data['createdAt'] : <any>null;
      this.tenantId =
        _data['tenantId'] !== undefined ? _data['tenantId'] : <any>null;
      this.username =
        _data['username'] !== undefined ? _data['username'] : <any>null;
      this.roleId = _data['roleId'] !== undefined ? _data['roleId'] : <any>null;
      this.isActive =
        _data['isActive'] !== undefined ? _data['isActive'] : <any>null;
      this.address = _data['address']
        ? AddressDto.fromJS(_data['address'])
        : <any>null;
    }
  }

  static fromJS(data: any): UserDtoUpdate {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoUpdate();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId !== undefined ? this.userId : <any>null;
    data['name'] = this.name !== undefined ? this.name : <any>null;
    data['phoneNumber'] =
      this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
    data['email'] = this.email !== undefined ? this.email : <any>null;
    data['createdAt'] =
      this.createdAt !== undefined ? this.createdAt : <any>null;
    data['tenantId'] = this.tenantId !== undefined ? this.tenantId : <any>null;
    data['username'] = this.username !== undefined ? this.username : <any>null;
    data['roleId'] = this.roleId !== undefined ? this.roleId : <any>null;
    data['isActive'] = this.isActive !== undefined ? this.isActive : <any>null;
    data['address'] = this.address ? this.address.toJSON() : <any>null;
    return data;
  }
}

export interface IUserDtoUpdate {
  userId?: number;
  name: string;
  phoneNumber: number;
  email: string;
  createdAt?: number;
  tenantId?: number;
  username: string;
  roleId: number;
  isActive?: boolean;
  address?: AddressDto;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
