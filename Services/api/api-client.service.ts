//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAddressClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: AddressDto | undefined): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: AddressDto | undefined): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: AddressDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class AddressClient implements IAddressClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Address/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Address/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: AddressDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Address/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: AddressDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Address/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Address/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: AddressDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Address/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAuthClient {
    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: LoginRequestDTO | undefined): Observable<ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient implements IAuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body?: LoginRequestDTO | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICountersClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: CounterDto | undefined): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: CounterDto | undefined): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: CounterDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class CountersClient implements ICountersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Counters/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Counters/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: CounterDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Counters/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: CounterDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Counters/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Counters/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: CounterDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Counters/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPaymentClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: PaymentDto | undefined): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: PaymentDto | undefined): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: PaymentDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class PaymentClient implements IPaymentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Payment/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Payment/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: PaymentDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Payment/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: PaymentDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Payment/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Payment/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: PaymentDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Payment/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPaymentMethodClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: PaymentMethodDto | undefined): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: PaymentMethodDto | undefined): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: PaymentMethodDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class PaymentMethodClient implements IPaymentMethodClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/PaymentMethod/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/PaymentMethod/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: PaymentMethodDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/PaymentMethod/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: PaymentMethodDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/PaymentMethod/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/PaymentMethod/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: PaymentMethodDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/PaymentMethod/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRoleClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: RoleDto | undefined): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: RoleDto | undefined): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: RoleDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class RoleClient implements IRoleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Role/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Role/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: RoleDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Role/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: RoleDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Role/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: RoleDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Role/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IServiceClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: ServiceDto | undefined): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: ServiceDto | undefined): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: ServiceDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class ServiceClient implements IServiceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Service/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Service/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: ServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Service/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: ServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Service/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Service/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: ServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Service/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISubscriptionClient {
    /**
     * @param userId (optional) 
     * @return OK
     */
    getUserSubscription(userId?: number | undefined): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    updateCounter(body?: SubscriptionDto | undefined): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @return OK
     */
    getUserToAddCount(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @return OK
     */
    usersByService(serviceId: number): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    getPreviousSubscription(body?: SubscriptionDto | undefined): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubscriptionDto | undefined): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubscriptionDto | undefined): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubscriptionDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class SubscriptionClient implements ISubscriptionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param userId (optional) 
     * @return OK
     */
    getUserSubscription(userId?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/GetUserSubscription?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserSubscription(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserSubscription(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetUserSubscription(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateCounter(body?: SubscriptionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Subscription/updateCounter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCounter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCounter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdateCounter(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getUserToAddCount(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/GetUserToAddCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserToAddCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserToAddCount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetUserToAddCount(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    usersByService(serviceId: number, httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/users-by-service/{serviceId}";
        if (serviceId === undefined || serviceId === null)
            throw new Error("The parameter 'serviceId' must be defined.");
        url_ = url_.replace("{serviceId}", encodeURIComponent("" + serviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersByService(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersByService(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processUsersByService(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getPreviousSubscription(body?: SubscriptionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Subscription/GetPreviousSubscription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPreviousSubscription(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPreviousSubscription(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetPreviousSubscription(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Subscription/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubscriptionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Subscription/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubscriptionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Subscription/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubscriptionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Subscription/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISubscriptionTypeClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubscriptionTypeDto | undefined): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubscriptionTypeDto | undefined): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubscriptionTypeDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class SubscriptionTypeClient implements ISubscriptionTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubscriptionType/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubscriptionType/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubscriptionTypeDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubscriptionTypeDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubscriptionType/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubscriptionTypeDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISubServiceClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubServiceDto | undefined): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubServiceDto | undefined): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubServiceDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class SubServiceClient implements ISubServiceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubService/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubService/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: SubServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubService/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: SubServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/SubService/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubService/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: SubServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/SubService/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITenantClient {
    /**
     * @param body (optional) 
     * @return OK
     */
    addTenantWithAdmin(body?: TenantWithAdminDto | undefined): Observable<void>;
    /**
     * @param name (optional) 
     * @return OK
     */
    search(name?: string | undefined): Observable<void>;
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TenantDto | undefined): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TenantDto | undefined): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TenantDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class TenantClient implements ITenantClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addTenantWithAdmin(body?: TenantWithAdminDto | undefined, httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Tenant/AddTenantWithAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddTenantWithAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddTenantWithAdmin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddTenantWithAdmin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @return OK
     */
    search(name?: string | undefined, httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Tenant/search?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tenant/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tenant/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TenantDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tenant/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TenantDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tenant/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TenantDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tenant/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITenantServiceClient {
    /**
     * @return OK
     */
    getServiceByTenantID(): Observable<TenantServiceDto[]>;
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TenantServiceDto | undefined): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TenantServiceDto | undefined): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TenantServiceDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class TenantServiceClient implements ITenantServiceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getServiceByTenantID(httpContext?: HttpContext): Observable<TenantServiceDto[]> {
        let url_ = this.baseUrl + "/api/TenantService/GetServiceByTenantID";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServiceByTenantID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServiceByTenantID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TenantServiceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TenantServiceDto[]>;
        }));
    }

    protected processGetServiceByTenantID(response: HttpResponseBase): Observable<TenantServiceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TenantServiceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/TenantService/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/TenantService/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TenantServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/TenantService/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TenantServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/TenantService/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/TenantService/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TenantServiceDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/TenantService/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITokensClient {
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TokenDto | undefined): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TokenDto | undefined): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TokenDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class TokensClient implements ITokensClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tokens/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tokens/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TokenDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tokens/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TokenDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Tokens/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tokens/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TokenDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Tokens/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITransactionClient {
    /**
     * @param id (optional) 
     * @return OK
     */
    getBalanceByID(id?: number | undefined): Observable<ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    generateReceipt(body?: TransactionPaymentDto | undefined): Observable<FileResponse>;
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TransactionDto | undefined): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TransactionDto | undefined): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TransactionDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class TransactionClient implements ITransactionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getBalanceByID(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Transaction/GetBalanceByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBalanceByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBalanceByID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetBalanceByID(response: HttpResponseBase): Observable<ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    generateReceipt(body?: TransactionPaymentDto | undefined, httpContext?: HttpContext): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Transaction/GenerateReceipt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateReceipt(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateReceipt(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGenerateReceipt(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = resultData500 !== undefined ? resultData500 : <any>null;
    
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Transaction/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Transaction/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: TransactionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Transaction/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: TransactionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Transaction/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Transaction/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: TransactionDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Transaction/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUsersClient {
    /**
     * @param name (optional) 
     * @return OK
     */
    search(name?: string | undefined): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    updateUser(body?: UserDto | undefined): Observable<void>;
    /**
     * @param serviceId (optional) 
     * @return OK
     */
    getUsersHasService(serviceId?: number | undefined): Observable<ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @return OK
     */
    getUserToPay(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @return OK
     */
    getAll(): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: UserDto | undefined): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: UserDto | undefined): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: UserDto | undefined): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
}

@Injectable({
    providedIn: 'root'
})
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param name (optional) 
     * @return OK
     */
    search(name?: string | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Users/search?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateUser(body?: UserDto | undefined, httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param serviceId (optional) 
     * @return OK
     */
    getUsersHasService(serviceId?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Users/GetUsersHasService?";
        if (serviceId === null)
            throw new Error("The parameter 'serviceId' cannot be null.");
        else if (serviceId !== undefined)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersHasService(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersHasService(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetUsersHasService(response: HttpResponseBase): Observable<ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getUserToPay(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Users/getUserToPay";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserToPay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserToPay(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetUserToPay(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(httpContext?: HttpContext): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Users/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Users/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body?: UserDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Users/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body?: UserDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/Users/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id?: number | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Users/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body?: UserDto | undefined, httpContext?: HttpContext): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/Users/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddressDto implements IAddressDto {
    addressId?: number;
    country?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    governorates?: string | undefined;
    building?: string | undefined;
    floor?: number;
    direction?: string | undefined;
    block?: string | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressId = _data["addressId"];
            this.country = _data["country"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.governorates = _data["governorates"];
            this.building = _data["building"];
            this.floor = _data["floor"];
            this.direction = _data["direction"];
            this.block = _data["block"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressId"] = this.addressId;
        data["country"] = this.country;
        data["street"] = this.street;
        data["city"] = this.city;
        data["region"] = this.region;
        data["governorates"] = this.governorates;
        data["building"] = this.building;
        data["floor"] = this.floor;
        data["direction"] = this.direction;
        data["block"] = this.block;
        return data;
    }
}

export interface IAddressDto {
    addressId?: number;
    country?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    governorates?: string | undefined;
    building?: string | undefined;
    floor?: number;
    direction?: string | undefined;
    block?: string | undefined;
}

export class CounterDto implements ICounterDto {
    counterId?: number;
    subServiceId?: number;
    count?: number;
    date?: number;
    tenantId?: number;

    constructor(data?: ICounterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.counterId = _data["counterId"];
            this.subServiceId = _data["subServiceId"];
            this.count = _data["count"];
            this.date = _data["date"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): CounterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CounterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["counterId"] = this.counterId;
        data["subServiceId"] = this.subServiceId;
        data["count"] = this.count;
        data["date"] = this.date;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ICounterDto {
    counterId?: number;
    subServiceId?: number;
    count?: number;
    date?: number;
    tenantId?: number;
}

export class LoginRequestDTO implements ILoginRequestDTO {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequestDTO {
    username?: string | undefined;
    password?: string | undefined;
}

export class PaymentMethodDto implements IPaymentMethodDto {
    paymentMethodId?: number;
    paymentMethodName?: string | undefined;
    paymentMethodCode?: string | undefined;
    tenantId?: number;

    constructor(data?: IPaymentMethodDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentMethodId = _data["paymentMethodId"];
            this.paymentMethodName = _data["paymentMethodName"];
            this.paymentMethodCode = _data["paymentMethodCode"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): PaymentMethodDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMethodId"] = this.paymentMethodId;
        data["paymentMethodName"] = this.paymentMethodName;
        data["paymentMethodCode"] = this.paymentMethodCode;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface IPaymentMethodDto {
    paymentMethodId?: number;
    paymentMethodName?: string | undefined;
    paymentMethodCode?: string | undefined;
    tenantId?: number;
}

export class PaymentDto implements IPaymentDto {
    paymentId?: number;
    subscriptionId?: number;
    paymentDate?: number;
    credit?: number;
    debit?: number;
    paymentMethodId?: number;
    tenantId?: number;

    constructor(data?: IPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentId = _data["paymentId"];
            this.subscriptionId = _data["subscriptionId"];
            this.paymentDate = _data["paymentDate"];
            this.credit = _data["credit"];
            this.debit = _data["debit"];
            this.paymentMethodId = _data["paymentMethodId"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): PaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentId"] = this.paymentId;
        data["subscriptionId"] = this.subscriptionId;
        data["paymentDate"] = this.paymentDate;
        data["credit"] = this.credit;
        data["debit"] = this.debit;
        data["paymentMethodId"] = this.paymentMethodId;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface IPaymentDto {
    paymentId?: number;
    subscriptionId?: number;
    paymentDate?: number;
    credit?: number;
    debit?: number;
    paymentMethodId?: number;
    tenantId?: number;
}

export class RoleDto implements IRoleDto {
    roleId?: number;
    roleName?: string | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IRoleDto {
    roleId?: number;
    roleName?: string | undefined;
}

export class ServiceDto implements IServiceDto {
    serviceId?: number;
    serviceCode?: string | undefined;
    serviceName?: string | undefined;
    tenantId?: number;

    constructor(data?: IServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serviceId = _data["serviceId"];
            this.serviceCode = _data["serviceCode"];
            this.serviceName = _data["serviceName"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): ServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceId"] = this.serviceId;
        data["serviceCode"] = this.serviceCode;
        data["serviceName"] = this.serviceName;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface IServiceDto {
    serviceId?: number;
    serviceCode?: string | undefined;
    serviceName?: string | undefined;
    tenantId?: number;
}

export class UsersHasServiceDto implements IUsersHasServiceDto {
    serviceId?: number;
    userCount?: number;

    constructor(data?: IUsersHasServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serviceId = _data["serviceId"];
            this.userCount = _data["userCount"];
        }
    }

    static fromJS(data: any): UsersHasServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsersHasServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceId"] = this.serviceId;
        data["userCount"] = this.userCount;
        return data;
    }
}

export interface IUsersHasServiceDto {
    serviceId?: number;
    userCount?: number;
}

export class SubServiceDto implements ISubServiceDto {
    subServiceId?: number;
    serviceId?: number;
    subscriptionTypeId?: number;
    subServiceCode?: string | undefined;
    subServiceName?: string | undefined;
    price?: number;
    tenantId?: number;

    constructor(data?: ISubServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subServiceId = _data["subServiceId"];
            this.serviceId = _data["serviceId"];
            this.subscriptionTypeId = _data["subscriptionTypeId"];
            this.subServiceCode = _data["subServiceCode"];
            this.subServiceName = _data["subServiceName"];
            this.price = _data["price"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): SubServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subServiceId"] = this.subServiceId;
        data["serviceId"] = this.serviceId;
        data["subscriptionTypeId"] = this.subscriptionTypeId;
        data["subServiceCode"] = this.subServiceCode;
        data["subServiceName"] = this.subServiceName;
        data["price"] = this.price;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ISubServiceDto {
    subServiceId?: number;
    serviceId?: number;
    subscriptionTypeId?: number;
    subServiceCode?: string | undefined;
    subServiceName?: string | undefined;
    price?: number;
    tenantId?: number;
}

export class SubscriptionTypeDto implements ISubscriptionTypeDto {
    subscriptionTypeId?: number;
    subscriptionTypeName?: string | undefined;

    constructor(data?: ISubscriptionTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subscriptionTypeId = _data["subscriptionTypeId"];
            this.subscriptionTypeName = _data["subscriptionTypeName"];
        }
    }

    static fromJS(data: any): SubscriptionTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subscriptionTypeId"] = this.subscriptionTypeId;
        data["subscriptionTypeName"] = this.subscriptionTypeName;
        return data;
    }
}

export interface ISubscriptionTypeDto {
    subscriptionTypeId?: number;
    subscriptionTypeName?: string | undefined;
}

export class SubscriptionDto implements ISubscriptionDto {
    subscriptionId?: number;
    subServiceId?: number;
    userId?: number;
    startDate?: number;
    endDate?: number;
    price?: number;
    quantity?: number;
    discount?: number;
    isActive?: boolean;
    tenantId?: number;

    constructor(data?: ISubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subscriptionId = _data["subscriptionId"];
            this.subServiceId = _data["subServiceId"];
            this.userId = _data["userId"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.price = _data["price"];
            this.quantity = _data["quantity"];
            this.discount = _data["discount"];
            this.isActive = _data["isActive"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): SubscriptionDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subscriptionId"] = this.subscriptionId;
        data["subServiceId"] = this.subServiceId;
        data["userId"] = this.userId;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["discount"] = this.discount;
        data["isActive"] = this.isActive;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ISubscriptionDto {
    subscriptionId?: number;
    subServiceId?: number;
    userId?: number;
    startDate?: number;
    endDate?: number;
    price?: number;
    quantity?: number;
    discount?: number;
    isActive?: boolean;
    tenantId?: number;
}

export class TenantServiceDto implements ITenantServiceDto {
    tenantServiceId?: number;
    tenantId?: number;
    serviceId?: number;

    constructor(data?: ITenantServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantServiceId = _data["tenantServiceId"];
            this.tenantId = _data["tenantId"];
            this.serviceId = _data["serviceId"];
        }
    }

    static fromJS(data: any): TenantServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantServiceId"] = this.tenantServiceId;
        data["tenantId"] = this.tenantId;
        data["serviceId"] = this.serviceId;
        return data;
    }
}

export interface ITenantServiceDto {
    tenantServiceId?: number;
    tenantId?: number;
    serviceId?: number;
}

export class TenantDto implements ITenantDto {
    tenantId?: number;
    tenantName?: string | undefined;
    address?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    isActive?: boolean;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.tenantName = _data["tenantName"];
            this.address = _data["address"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.createdAt = _data["createdAt"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenantName"] = this.tenantName;
        data["address"] = this.address;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["createdAt"] = this.createdAt;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface ITenantDto {
    tenantId?: number;
    tenantName?: string | undefined;
    address?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    isActive?: boolean;
}

export class TenantWithAdminDto implements ITenantWithAdminDto {
    tenantId?: number;
    tenantName?: string | undefined;
    address?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    isActive?: boolean;
    user?: UserDto;

    constructor(data?: ITenantWithAdminDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.tenantName = _data["tenantName"];
            this.address = _data["address"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.createdAt = _data["createdAt"];
            this.isActive = _data["isActive"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantWithAdminDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantWithAdminDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenantName"] = this.tenantName;
        data["address"] = this.address;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["createdAt"] = this.createdAt;
        data["isActive"] = this.isActive;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITenantWithAdminDto {
    tenantId?: number;
    tenantName?: string | undefined;
    address?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    isActive?: boolean;
    user?: UserDto;
}

export class TokenDto implements ITokenDto {
    tokenId?: number;
    token1?: string | undefined;
    tokenType?: string | undefined;
    createdAt?: number;
    expiresAt?: number;
    isActive?: boolean;
    tenantId?: number;

    constructor(data?: ITokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenId = _data["tokenId"];
            this.token1 = _data["token1"];
            this.tokenType = _data["tokenType"];
            this.createdAt = _data["createdAt"];
            this.expiresAt = _data["expiresAt"];
            this.isActive = _data["isActive"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): TokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new TokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenId"] = this.tokenId;
        data["token1"] = this.token1;
        data["tokenType"] = this.tokenType;
        data["createdAt"] = this.createdAt;
        data["expiresAt"] = this.expiresAt;
        data["isActive"] = this.isActive;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ITokenDto {
    tokenId?: number;
    token1?: string | undefined;
    tokenType?: string | undefined;
    createdAt?: number;
    expiresAt?: number;
    isActive?: boolean;
    tenantId?: number;
}

export class TransactionPaymentDto implements ITransactionPaymentDto {
    userId?: number;
    name?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    tenantId?: number;
    username?: string | undefined;
    roleId?: number;
    isActive?: boolean;
    transactionId?: number;
    credit?: number;
    debit?: number;
    subscriptions?: SubscriptionDto[] | undefined;

    constructor(data?: ITransactionPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.createdAt = _data["createdAt"];
            this.tenantId = _data["tenantId"];
            this.username = _data["username"];
            this.roleId = _data["roleId"];
            this.isActive = _data["isActive"];
            this.transactionId = _data["transactionId"];
            this.credit = _data["credit"];
            this.debit = _data["debit"];
            if (Array.isArray(_data["subscriptions"])) {
                this.subscriptions = [] as any;
                for (let item of _data["subscriptions"])
                    this.subscriptions!.push(SubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransactionPaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["createdAt"] = this.createdAt;
        data["tenantId"] = this.tenantId;
        data["username"] = this.username;
        data["roleId"] = this.roleId;
        data["isActive"] = this.isActive;
        data["transactionId"] = this.transactionId;
        data["credit"] = this.credit;
        data["debit"] = this.debit;
        if (Array.isArray(this.subscriptions)) {
            data["subscriptions"] = [];
            for (let item of this.subscriptions)
                data["subscriptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITransactionPaymentDto {
    userId?: number;
    name?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    tenantId?: number;
    username?: string | undefined;
    roleId?: number;
    isActive?: boolean;
    transactionId?: number;
    credit?: number;
    debit?: number;
    subscriptions?: SubscriptionDto[] | undefined;
}

export class TransactionDto implements ITransactionDto {
    transactionId?: number;
    userId?: number;
    credit?: number;
    debit?: number;
    createdAt?: number;
    tenantId?: number;

    constructor(data?: ITransactionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionId = _data["transactionId"];
            this.userId = _data["userId"];
            this.credit = _data["credit"];
            this.debit = _data["debit"];
            this.createdAt = _data["createdAt"];
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): TransactionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId;
        data["userId"] = this.userId;
        data["credit"] = this.credit;
        data["debit"] = this.debit;
        data["createdAt"] = this.createdAt;
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ITransactionDto {
    transactionId?: number;
    userId?: number;
    credit?: number;
    debit?: number;
    createdAt?: number;
    tenantId?: number;
}

export class UserDto implements IUserDto {
    userId?: number;
    name?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    tenantId?: number;
    username?: string | undefined;
    passwordHash?: string | undefined;
    roleId?: number;
    isActive?: boolean;
    address?: AddressDto;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.createdAt = _data["createdAt"];
            this.tenantId = _data["tenantId"];
            this.username = _data["username"];
            this.passwordHash = _data["passwordHash"];
            this.roleId = _data["roleId"];
            this.isActive = _data["isActive"];
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["createdAt"] = this.createdAt;
        data["tenantId"] = this.tenantId;
        data["username"] = this.username;
        data["passwordHash"] = this.passwordHash;
        data["roleId"] = this.roleId;
        data["isActive"] = this.isActive;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDto {
    userId?: number;
    name?: string | undefined;
    phoneNumber?: number;
    email?: string | undefined;
    createdAt?: number;
    tenantId?: number;
    username?: string | undefined;
    passwordHash?: string | undefined;
    roleId?: number;
    isActive?: boolean;
    address?: AddressDto;
}

export class ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: AddressDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? AddressDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: AddressDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: CounterDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? CounterDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: CounterDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: PaymentMethodDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? PaymentMethodDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: PaymentMethodDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: PaymentDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? PaymentDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: PaymentDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: RoleDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? RoleDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: RoleDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: ServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? ServiceDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: ServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: UsersHasServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? UsersHasServiceDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfUsersHasServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: UsersHasServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? SubServiceDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubscriptionTypeDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? SubscriptionTypeDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubscriptionTypeDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubscriptionDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? SubscriptionDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: SubscriptionDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TenantServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? TenantServiceDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TenantServiceDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TenantDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? TenantDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TenantDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TokenDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? TokenDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TokenDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TransactionDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? TransactionDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: TransactionDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null implements IApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: UserDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"] ? UserDto.fromJS(_data["data"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_null {
    success?: boolean;
    data?: UserDto;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: boolean;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfBooleanAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: boolean;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: AddressDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AddressDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfAddressDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: AddressDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: CounterDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CounterDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfCounterDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: CounterDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: PaymentMethodDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PaymentMethodDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfPaymentMethodDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: PaymentMethodDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: PaymentDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PaymentDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfPaymentDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: PaymentDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: RoleDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoleDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfRoleDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: RoleDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: ServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ServiceDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: ServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SubServiceDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfSubServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubscriptionTypeDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SubscriptionTypeDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionTypeDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubscriptionTypeDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubscriptionDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SubscriptionDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfSubscriptionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: SubscriptionDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TenantServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TenantServiceDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfTenantServiceDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TenantServiceDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TenantDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TenantDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfTenantDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TenantDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TokenDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TokenDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfTokenDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TokenDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TransactionDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TransactionDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfTransactionDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: TransactionDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: UserDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserDto.fromJS(item));
            }
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfIEnumerable_1OfOfUserDtoAndMLBLLAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: UserDto[] | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: number;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfDecimalAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: number;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export class ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: string | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.data = _data["data"];
            this.statusCode = _data["statusCode"];
            this.message = _data["message"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["data"] = this.data;
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponse_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    success?: boolean;
    data?: string | undefined;
    statusCode?: number;
    message?: string | undefined;
    errorMessage?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}